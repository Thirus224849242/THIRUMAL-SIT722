# .github/workflows/prod_cd.yml
# Continuous Deployment to Production on main branch

name: CD Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:  # allow manual trigger too

jobs:
  deploy-production:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --overwrite-existing

      - name: Create production namespace (if not exists)
        run: |
          kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply configs & secrets
        run: |
          kubectl apply -n production -f k8s/configmaps.yaml || true
          kubectl apply -n production -f k8s/secrets.yaml || true

      - name: Deploy all manifests
        run: |
          kubectl apply -n production -f k8s/

      - name: Wait for deployments to roll out
        run: |
          kubectl rollout status deployment/customer-service -n production --timeout=300s
          kubectl rollout status deployment/order-service -n production --timeout=300s
          kubectl rollout status deployment/product-service -n production --timeout=300s
          kubectl rollout status deployment/frontend -n production --timeout=300s

      - name: Get frontend LoadBalancer IP
        run: |
          echo "Waiting for frontend LoadBalancer IP..."
          for i in {1..30}; do
            FRONTEND_IP=$(kubectl get svc frontend-service -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$FRONTEND_IP" ]]; then
              echo "✅ Frontend is available at: http://$FRONTEND_IP"
              exit 0
            fi
            echo "Still pending... retrying in 10s"
            sleep 10
          done
          echo "❌ Timed out waiting for LoadBalancer IP"
          exit 1
